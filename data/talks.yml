- title: "To Gather, or not to Gather, that is the question."
  description: |
    Depuis l'arriv√©e de l'api java.util.Stream en Java 8, on entend une complainte monter de la communaut√© :
    
     _√î rage ! √î d√©sespoir ! √î vieillesse ennemie ! Les op√©rations finales sont ouvertes, mais pas les op√©rations interm√©daires... N'ai-je donc tant v√©cu que pour cette infamie ? üò±_

    Amis, r√©jouissez vous, car votre complainte a √©t√© entendue ! Nous voici donc tous r√©unis pour nous jeter corps et √¢mes dans cet ajout : les üî• java.util.stream.Gatherer üî•.

    Comment fonctionnent-ils ? Est-il simple d'en impl√©menter ? Et d'ailleurs pourquoi je voudrais m√™me le faire ?

    N'avez-vous jamais eu envie d'avoir un index dans vos streams, de les zipper ou de les fusionner ? C'est ce que je vous propose de mettre en oeuvre avec quelques Gatherers, du plus simple au plus complexe (tout est relatif).

    Et cadeau bonux, vous repartirez avec le d√©p√¥t git contenant les sources explor√©es !
  slides: https://jtama.github.io/to-gather-or-not-to-gather/#/
  code: https://github.com/jtama/to-gather-or-not-to-gather
  post: ../posts/to-gather-or-not-to-gather-that-is-the-question/
  conferences:
    - name: Touraine Tech 2025
      video: https://youtu.be/FsL8BPgKKPM?si=Bq53NbCjSpRlXSHn
- title: "OpenRewrite: Refactoring as code"
  description: |
    Vous √™tes dans la team __Doc as code, Infrastructure as code, Ci as code__ ? La r√©ponse √† ces questions vous semble √©vidente.
  
    Les bienfaits de l'approche _"as code"_ ne sont plus √† d√©montrer et pourtant il reste un domaine laiss√© pour compte.

    Oui parce que si je vous pose ces questions pour vos refactorings et vos migrations, √ßa sera plut√¥t :
  
    Vous √™tes plut√¥t team __chercher/remplacer__ ? __regexp__ ? __IDE click droit *rename method*__ ?
  
    Eh oui, les cordonniers sont toujours les plus mal chauss√©s, et nous continuons a √©crire des guides de migrations longs comme un dimanche de pluie. Fatigu√© de mener des migrations JUnit4 -> JUnit 5? Spring-boot 2 -> Spring-boot 3?
    
    Est-ce qu‚Äôil ne serait pas temps d‚Äôentrer dans la team ___refactoring as code___?
    
    OpenRewrite est la bo√Æte √† outils parfaite pour √©crire, versionner et partager vos refactoring. L'Ansible du refactoring.
    
    Ne repartez pas sans une nouvelle as corde √† votre arc, ne faite plus jamais vos migrations √† la main.
  slides: https://jtama.github.io/openrewrite-refactoring-as-code/#/
  code: https://github.com/jtama/openrewrite-refactoring-as-code
  post: https://dev.to/onepoint/openrewrite-refactoring-as-code-2p48
  conferences:
    - name: SnowCamp 2025
    - name: Touraine Tech 2025
      video: https://youtu.be/FsL8BPgKKPM?si=Df9vknCZCh5BM4Tm
    - name: DevoxxFR 2025
- title: "Quarkus : Greener, Better, Faster, stronger!"
  description: |
    Quarkus n'est maintenant plus un nouveau venu dans l'√©cosyst√®me java, et de plus en plus de projets l'adoptent comme base de travail,  mais peu de d√©veloppeurs comprennent vraiment √† quel point la magie se cache dans ses extensions.

    C'est en d√©veloppant l'extension [Quarkus Min.io](https://github.com/quarkiverse/quarkus-minio) que j'ai  d√©couvert une partie de leurs capacit√©s,  et comment elles sont en fait au coeur des promesses du framework. Leur d√©veloppement est simple et permet de rendre un grand nombre de services √† nos utilisateurs. Mais surtout elles permettent de ne rendre que les services dont l'utilisateur √† besoin nous permettant d'√©conomiser m√©moire, cpu et de raccourcir les temps de d√©marrage.
  
    Et si vous veniez en d√©velopper une avec moi et que nous mettions en oeuvre quelques uns de ces tours de magie ?
  
    Vous pourriez peut √™tre aussi aimer √ßa et repartir avec quelques id√©es !
  slides: https://jtama.github.io/quarkus-greener-better-faster-stronger/rivieraDev/#/
  code: https://github.com/jtama/quarkus-extension-demo
  post: https://dev.to/onepoint/quarkus-greener-better-faster-stronger-55ea
  conferences:
    - name: SnowCamp 2024
    - name: Touraine Tech 2024
    - name: RivieraDev 2024
    - name: Bordeaux JUG
      video: https://youtu.be/2rKAtA1u7iY?si=PrjlDAwaRTKwgznw
    - name: Devfest Toulouse 2024
- title: "Les super pouvoirs du package java.util.function "
  description: |
    Le package `java.util.function` f√™tera ses 10 ans en 2024 et force est de constater que malgr√© son omnipr√©sence dans nos d√©veloppements, son utilisation reste probablement sous-estim√© et mal comprise.  
  
    Avez-vous d√©j√† utilis√© ces classes comme param√®tre de vos m√©thodes ? Avez-vous d√©j√† utilis√© leur capacit√© de composition ?  Ne vous √™tes vous jamais dit que cet h√©ritage douteux entre deux classes, ne vous plait pas, mais que faute de mieux, il reste l√† ?
    
    Sans pour autant abuser des concepts de programmation fonctionnelle, nous aimerions vous pr√©senter pendant ce talk √† travers de cas concrets, une utilisation plus avanc√©e du package java.util.function.
    
    Fonctions anonymes, d'ordre sup√©rieur ou encore la composition de fonctions, toutes ces notions n'auront d√©sormais plus de secret pour vous et trouveront une place de choix dans votre bo√Æte √† outils de refactoring.
    
    Vous repartirez avec un d√©p√¥t git avant/apr√®s en prime !
    Avec le merveilleux https://github.com/dlucasd[Damien Lucas,] image:https://github.com/dlucasd.png[Damien Lucas,role=avatar]
  slides: https://jtama.github.io/les-super-pouvoirs-du-package-java.util.function/#/
  code: https://github.com/jtama/les-super-pouvoirs-du-package-java.util.function
  conferences:
    - name: Devfest Toulouse 2023
    - name: SnowCamp 2024
    - name: Touraine Tech 2024
    - name: RivieraDev 2024
- title: Alice au pays d'Opentelemetry
  description: |
        S'ennuyant fermement alors que sa grande soeur lisait un livre sans image ni dialogue, Alice aper√ßut soudain passer aupr√®s d'elle Opentelemetry criant qu'il allait unir traces, metrics et logs.
        En entrant derri√®re lui dans son terrier, elle fit une chute presque interminable qui l'emm√®na dans un monde aux antipodes du sien. Elle y rencontra une galerie de personnages retors et se trouva confront√©e au paradoxe, √† l'absurde et au bizarre‚Ä¶

        C'est une image tr√®s conforme √† l'impression que j'ai eu en voulant mettre en place Opentelemetry sur un projet. J'√©tais revenu tr√®s enthousiaste d'une conf√©rence qui me laissait pr√©sager que tout √©tait merveilleux, mais ce ne f√ªt pas si simple.

        Je vous propose donc de suivre le cas r√©el de la mise en place d'Opentelemtry sur une application en service d√©velopp√©e avec Quarkus et d√©ploy√©e dans un cluster K8S.
  slides: https://jtama.github.io/alice-au-pays-d-opentelemetry/#/
  conferences:
    - name: BDX/IO 2023
      video: https://youtu.be/ArjNjrsnW6A?si=TWCDg05zzdKsOr0z
    - name: DevoxxFR 2024
      video: https://youtu.be/0xSCUgHxZu0?si=7vJDTfZ_kBAqS3Kn
    - name: Devfest Lille 2023
      video: https://youtu.be/Y-13iEwlqV0?si=2UuLhH6LLQ4PEHcJ
- title: Vous allez finir par les aimer les `Optionals`???
  description: |
        Les `optional` ont d√©barqu√© en java 1.8 il y a 8 ans. Quand ils sont apparus je me souviens m'√™tre dit :
        
        "G√©nial ! Avant on faisait _if (object != null)_, maintenant on fait _if (optional.isPresent())_ Quelle avanc√©e üôÑ !"

        Depuis j'ai eu l'occasion de les cotoyer, d'apprendre √† les aimer et √† les utiliser √† bon escient.

        Sur les projets auxquels je participe je m'aper√ßois qu'ils sont encore souvent mal utilis√©s, ou pas utilise√©s quand il le faudrait.

        Ensemble red√©couvrons leur √©l√©gance, apprenons √† ma√Ætriser leur API et pourquoi ils sont bien mieux qu'un simple *null check* !
  slides: https://jtama.github.io/vous-allez-finir-par-les-aimer-les-optional/#/
  post: https://dev.to/onepoint/vous-allez-finir-par-les-aimer-les-optionals--25pb
  conferences:
    - name: Touraine Tech 2023
      video: https://youtu.be/0LVkoF5D1eE?si=9qXUQwH5mG6UQyHN
